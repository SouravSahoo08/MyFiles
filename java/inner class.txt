Java inner class or nested class is a class which is declared inside the class or interface.

We use inner classes to logically group classes and interfaces in one place so that it can be more readable and maintainable.

Additionally, it can access all the members of outer class including private data members and methods.

Syntax of Inner class
-----------------------
class Java_Outer_class{  
 //code  
 class Java_Inner_class{  
  //code  
 }  
}  

usecase
---------
-suppose we have an university class.
-We have some college class and we want to access the members of university class from by the help of college object.
-suppose we are using inheritance concept
-if we will use inheritance concept we will face one problem that is in java multiple inheritance is not allowed.

BPUT-->trident,silicon,cvraman,gita

class BPUT wants to access multiple colleges then it is not possible
-suppose there are some private members then also we can not access private members from outside of the class.
Advantage of java inner classes
--------------------------------
There are basically three advantages of inner classes in java. They are as follows:

1) Nested classes represent a special type of relationship that is it can access all the members (data members and methods) of outer class including private.

2) Nested classes are used to develop more readable and maintainable code because it logically group classes and interfaces in one place only.

3) Code Optimization: It requires less code to write.

Difference between nested class and inner class in Java
Inner class is a part of nested class. Non-static nested classes are known as inner classes.

Types of Nested classes
-------------------------
There are two types of nested classes non-static and static nested classes.The non-static nested classes are also known as inner classes.

1.Non-static nested class (inner class)
   1.Member inner class
   2.Anonymous inner class
   3.Local inner class
2.Static nested class

Type	   Description
Member     Inner Class	A class created within class and outside method.
Anonymous  Inner Class	A class created for implementing interface or extending class. Its name is decided by the java compiler.
Local      Inner Class	A class created within method.
Static     Nested Class	A static class created within class.
Nested     Interface	An interface created within class or interface.


Java Member inner class
A non-static class that is created inside a class but outside a method is called member inner class.

Syntax:

class Outer{  
 //code  
 class Inner{  
  //code  
 }  
}  

Java Member inner class example
In this example, we are creating msg() method in member inner class that is accessing the private data member of outer class.


class TestMemberOuter1{  
 private int data=30;  
 class Inner{  
  void msg(){System.out.println("data is "+data);}  
 }  
 public static void main(String args[]){  
  TestMemberOuter1 obj=new TestMemberOuter1();  
  TestMemberOuter1.Inner in=obj.new Inner();  
  in.msg();  
 }  
}  


Java Anonymous inner class
A class that have no name is known as anonymous inner class in java. It should be used if you have to override method of class or interface. Java Anonymous inner class can be created by two ways:

Class (may be abstract or concrete).
Interface
Java anonymous inner class example using class

abstract class Person{  
  abstract void eat();  
}  
class TestAnonymousInner{  
 public static void main(String args[]){  
  Person p=new Person(){  
  void eat(){System.out.println("nice fruits");}  
  };  
  p.eat();  
 }  
}  

Java Local inner class
------------------------
A class i.e. created inside a method is called local inner class in java. If you want to invoke the methods of local inner class, you must instantiate this class inside the method.

Java local inner class example


public class localInner1{  
 private int data=30;//instance variable  
 void display(){  
  class Local{  
   void msg(){System.out.println(data);}  
  }  
  Local l=new Local();  
  l.msg();  
 }  
 public static void main(String args[]){  
  localInner1 obj=new localInner1();  
  obj.display(); 
 }  
}  



Java static nested class
---------------------------
A static class i.e. created inside a class is called static nested class in java. It cannot access non-static data members and methods. It can be accessed by outer class name.

It can access static data members of outer class including private.
Static nested class cannot access non-static (instance) data member or method.
Java static nested class example with instance method
------------------------------------------------------
class TestOuter1{  
  static int data=30;  
  static class Inner{  
   void msg(){System.out.println("data is "+data);}  
  }  
  public static void main(String args[]){  
  TestOuter1.Inner obj=new TestOuter1.Inner();  
  obj.msg();  
  }  
}  


Java Nested Interface
An interface i.e. declared within another interface or class is known as nested interface. The nested interfaces are used to group 
related interfaces so that they can be easy to maintain. The nested interface must be referred by the outer interface or class. 
It can't be accessed directly.

Points to remember for nested interfaces
There are given some points that should be remembered by the java programmer.

Nested interface must be public if it is declared inside the interface but it can have any access modifier if 
declared within the class. Nested interfaces are declared static implicitely.
Syntax of nested interface which is declared within the interface
interface interface_name{  
 ...  
 interface nested_interface_name{  
  ...  
 }  
}   
Syntax of nested interface which is declared within the class
class class_name{  
 ...  
 interface nested_interface_name{  
  ...  
 }  
}   

 
Example of nested interface which is declared within the interface
In this example, we are going to learn how to declare the nested interface and how we can access it.
interface Showable{  
  void show();  
  interface Message{  
   void msg();  
  }  
}  
class TestNestedInterface1 implements Showable.Message{  
 public void msg(){System.out.println("Hello nested interface");}  
  
 public static void main(String args[]){  
  Showable.Message message=new TestNestedInterface1();//upcasting here  
  message.msg();  
 }  
}  